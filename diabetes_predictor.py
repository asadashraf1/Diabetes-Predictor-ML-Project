# -*- coding: utf-8 -*-
"""Diabetes_Predictor.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15qrKp8ghhH_TTH8D9J-VKKtzYwIScnYg
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""**Data Collection & Analysis**"""

#loading the data into the Pandas Dataframe
diabetes_dataset = pd.read_csv("diabetes.csv")

diabetes_dataset.head()

diabetes_dataset.shape

#getting the statistical measure of data
diabetes_dataset.describe()

diabetes_dataset["Outcome"].value_counts()

"""0 => Non Diabetic
1 => Diabetic
"""

diabetes_dataset.groupby("Outcome").mean()

#separating data and labels
X = diabetes_dataset.drop(columns = "Outcome", axis = 1)
Y = diabetes_dataset['Outcome']

print(X)

print(Y)

"""Data Standardization"""

scaler = StandardScaler()
scaler.fit(X)
standard_data = scaler.transform(X)
print(standard_data)

X = standard_data
Y = diabetes_dataset["Outcome"]

"""**Spliting into Training & Test data**"""

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size= 0.2, stratify=Y , random_state=2)

"""**Training the model**"""

classify = svm.SVC(kernel='linear')

#training the support vector classifer machine
classify.fit(X_train, Y_train)

"""**Model Evaluation**

Accuracy Score
"""

x_train_prediction = classify.predict(X_train)
training_data_accuracy = accuracy_score(x_train_prediction, Y_train)
print('Accuracy score on the training data : ', training_data_accuracy)

"""Test Score"""

x_test_prediction = classify.predict(X_test)
test_data_accuracy = accuracy_score(x_test_prediction, Y_test)
print('Accuracy score on the test data : ', test_data_accuracy)

"""**Making a Predictive System**"""

input_data = ()

#changing the input data to numpy array
input_datanp = np.asarray(input_data)

#reshaping array as we are predicting for one instance
input_reshape = input_datanp.reshape(1,-1)

#standardize the data
std_data = scaler.transform(input_reshape)

prediction = classify.predict(std_data)
print(prediction)
#condition to print diabetic or not diabetic

if (prediction[0] == 0):
  print('The person is not diabetic. Well done,keep it up!')
else:
  print('The person is diabetic. Go take a walk!')



